{"version":3,"sources":["../external \"electron\"","logo.svg","Messenger/MessageInput.js","Messenger/MessageRow.js","Messenger/MessageDisplay.js","lib/io.js","lib/MessageApi.js","Messenger/Messenger.js","lib/VideoEmitter.js","VideoStream/Video.js","lib/VideoSources.js","lib/AudioSources.js","lib/AudioEmitter.js","VideoStream/VideoStream.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","__webpack_require__","p","MessengeInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","e","preventDefault","props","onSubmit","setState","_this2","react_default","a","createElement","className","handleSubmit","bind","type","placeholder","onChange","target","Component","MessageRow","author","message","MessengeDisplay","messages","map","m","k","MessageRow_MessageRow","name","key","io","SERVER_URL","VIDEO_ROUTE","SCREEN_ROUTE","AUDIO_ROUTE","VIDEO_SUBSCRIBE_ROUTE","MESSAGE_SUBSCRIBE_ROUTE","MESSAGE_ROUTE","MESSAGE_EVENT","SCREEN_EVENT","VIDEO_EVENT","AUDIO_EVENT","sails","url","socket","get","MessageApi","fetch","response","json","method","body","JSON","stringify","cb","ctx","on","sender","Messenger","api","then","listen","newMsg","newMessages","slice","push","send","MessageDisplay_MessengeDisplay","MessageInput_MessengeInput","sendMessage","VideoEmitter","videoSource","video","canvas","context","getContext","height","width","handleError","handleStream","setInterval","drawImage","route","post","toDataURL","stream","srcObject","error","Video","React","createRef","current","autoPlay","ref","style","display","Webcam","navigator","mediaDevices","getUserMedia","audio","catch","Desktop","desktopCapturer","getSources","types","sources","electron","find","s","mandatory","chromeMediaSource","chromeMediaSourceId","id","minWidth","maxWidth","minHeight","maxHeight","Microphone","AudioEmitter","audioSource","AudioContext","mediaRecorder","MediaRecorder","audioChunks","ondataavailable","event","data","onstop","reader","FileReader","onloadend","result","readAsDataURL","pop","stop","start","VideoStream","Video_Video","title","App","Messenger_Messenger_Messenger","VideoStream_VideoStream_VideoStream","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d48bc90.chunk.js","sourcesContent":["module.exports = require(\"electron\");","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class MessengeInput extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            value: \"\"\r\n        }\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.onSubmit(this.state.value)\r\n        this.setState({ value: \"\" })\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.state\r\n\r\n        return (\r\n            <form className=\"message-input\" onSubmit={this.handleSubmit.bind(this)}>\r\n                <input type=\"text\" \r\n                placeholder=\"Say...\" \r\n                value={value}\r\n                onChange={ e => this.setState({ value: e.target.value }) }\r\n                />\r\n                <button>Send</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class MessageRow extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"message-row\">\r\n                <p><b>{this.props.author}</b>: {this.props.message}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport MessageRow from './MessageRow'\r\n\r\nexport default class MessengeDisplay extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"message-container\">\r\n                { \r\n                    this.props.messages.map((m,k) => \r\n                        <MessageRow author={m.name} message={m.message} key={k} />  \r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","const io = require('sails.io.js')(require('socket.io-client'));\r\n\r\nif(process.env.NODE_ENV === \"production\") {\r\n    io.SERVER_URL = 'https://agile-peak-85163.herokuapp.com'\r\n} else {\r\n    io.SERVER_URL = \"http://localhost:1337\"\r\n}\r\n\r\nio.VIDEO_ROUTE = '/video/emitvideo'\r\nio.SCREEN_ROUTE = '/video/stream'\r\nio.AUDIO_ROUTE = '/video/audio'\r\nio.VIDEO_SUBSCRIBE_ROUTE = '/video/sub'\r\n\r\nio.MESSAGE_SUBSCRIBE_ROUTE = \"/message/sub\"\r\nio.MESSAGE_ROUTE = \"/message\"\r\n\r\nio.MESSAGE_EVENT = \"message\"\r\nio.SCREEN_EVENT = \"screenevent\"\r\nio.VIDEO_EVENT = \"videoevent\"\r\nio.AUDIO_EVENT = \"audioevent\"\r\n\r\nio.sails.url = io.SERVER_URL\r\n\r\nio.socket.get(io.VIDEO_SUBSCRIBE_ROUTE)\r\nio.socket.get(io.MESSAGE_SUBSCRIBE_ROUTE)\r\n\r\nexport default io","import io from './io'\r\n\r\nexport default class MessageApi {\r\n\r\n    async get() {\r\n        const response = await fetch(io.SERVER_URL+io.MESSAGE_ROUTE)\r\n        const json = await response.json()\r\n        return json;\r\n    }\r\n\r\n    async send(name, message) {\r\n        const response = await fetch(io.SERVER_URL+io.MESSAGE_ROUTE, {\r\n            method:\"POST\",\r\n            body: JSON.stringify({ name, message })\r\n        })\r\n\r\n        const json = await response.json();\r\n\r\n        return json;\r\n    }\r\n\r\n    listen(cb,ctx) {\r\n        io.socket.on(io.MESSAGE_EVENT, cb.bind(ctx))\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport MessageInput from './MessageInput'\r\nimport MessageDisplay from './MessageDisplay'\r\nimport \"./Messenger.css\"\r\n\r\nimport MessageApi from '../lib/MessageApi'\r\n\r\nconst messages = [\r\n    { sender:\"Lorem\", message:\"ipsum\" },\r\n]\r\n\r\nexport default class Messenger extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            messages\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.api = new MessageApi()\r\n        this.api.get().then( messages => this.setState({ messages }) )\r\n\r\n        this.api.listen( newMsg => {\r\n            const newMessages = this.state.messages.slice()\r\n            newMessages.push(newMsg)\r\n\r\n            this.setState({ messages: newMessages })\r\n        })\r\n    }\r\n\r\n    sendMessage(message) {\r\n        this.api.send(\"Instructor\", message)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"messenger-container\">\r\n                <MessageDisplay messages = { this.state.messages } />\r\n                <MessageInput onSubmit={this.sendMessage.bind(this)} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import io from './io';\r\n\r\nexport default class VideoEmitter {\r\n\r\n    constructor(videoSource, video, canvas) {\r\n        this.video = video\r\n        this.context = canvas.getContext('2d')\r\n        this.context.height = canvas.height\r\n        this.context.width = canvas.width\r\n        videoSource(this.handleError.bind(this), this.handleStream.bind(this))\r\n        \r\n\r\n        setInterval(() => {\r\n            this.context.drawImage(video, 0, 0, this.context.width, this.context.height)\r\n            \r\n            const route = videoSource.type === \"desktop\" \r\n            ? io.SCREEN_ROUTE\r\n            : io.VIDEO_ROUTE\r\n\r\n            io.socket.post(route, { video: canvas.toDataURL('image/webp') })\r\n        }, 5)\r\n    }\r\n\r\n    handleStream(stream) {\r\n        this.video.srcObject = stream;\r\n    }\r\n\r\n    handleError(error) {\r\n        throw error;\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport VideoEmitter from '../lib/VideoEmitter';\r\n\r\nexport default class Video extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.video = React.createRef()\r\n        this.canvas = React.createRef()\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const { videoSource } = this.props\r\n\r\n        if(videoSource) {\r\n            new VideoEmitter(videoSource, this.video.current, this.canvas.current)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"video-wrapper\">\r\n                <video autoPlay ref={this.video}/>\r\n                <canvas ref={this.canvas} style={{display:\"none\"}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import { desktopCapturer } from 'electron'\r\n\r\nexport function Webcam(handleError, handleStream) {\r\n\r\n    navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n            width: 1280,\r\n            height: 720,\r\n        },\r\n        audio: false\r\n    }).then(\r\n        handleStream\r\n    ).catch(\r\n        handleError\r\n    )\r\n\r\n}\r\n\r\nWebcam.type = \"webcam\"\r\n\r\nexport function Desktop(handleError, handleStream) {\r\n    desktopCapturer.getSources({ types: ['window', 'screen'] }, (error, sources) => {\r\n        if (error) throw error\r\n\r\n        const electron = sources.find( s => s.name === \"Entire screen\" )\r\n\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: false,\r\n            video: {\r\n                mandatory: {\r\n                    chromeMediaSource: 'desktop',\r\n                    chromeMediaSourceId: electron.id,\r\n                    minWidth: 1280,\r\n                    maxWidth: 1280,\r\n                    minHeight: 720,\r\n                    maxHeight: 720\r\n                }\r\n            }\r\n        })\r\n        .then(handleStream)\r\n        .catch(handleError)\r\n\r\n    })\r\n}\r\n\r\nDesktop.type = 'desktop'","export function Microphone(handleError, handleStream) {\r\n\r\n    navigator.mediaDevices.getUserMedia({ audio:true, video:false })\r\n    .then( handleStream )\r\n    .catch( handleError )\r\n\r\n}\r\n\r\nMicrophone.type = \"microphone\"","import io from './io'\r\n\r\nconst SAMPLE_RATE = 250 // in milliseconds per sample\r\n\r\nexport default class AudioEmitter {\r\n    \r\n    constructor(audioSource) {\r\n        audioSource(\r\n            this.handleError.bind(this),\r\n            this.handleStream.bind(this)\r\n        )\r\n        this.context = new AudioContext()\r\n    }\r\n\r\n    handleStream(stream) {\r\n        const mediaRecorder = new MediaRecorder(stream)\r\n        const audioChunks = []\r\n\r\n        mediaRecorder.ondataavailable = event => {\r\n            audioChunks.push(event.data)\r\n        }\r\n        \r\n        mediaRecorder.onstop = () => {\r\n            const reader = new FileReader()\r\n            reader.onloadend = () => {\r\n                io.socket.post(io.AUDIO_ROUTE, { audio: reader.result })\r\n            }\r\n            reader.readAsDataURL(audioChunks.pop())\r\n        }\r\n\r\n        setInterval(() => {\r\n            if(mediaRecorder.state !== \"inactive\") mediaRecorder.stop()\r\n            mediaRecorder.start()\r\n        }, SAMPLE_RATE)\r\n    }\r\n\r\n    handleError(e) {\r\n        throw e\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * \r\n * start recording \r\n * await ondataavailable --> push event.data into audiochunks\r\n * await onstop --> create file reader \r\n *      await onloadend\r\n *      \r\n * \r\n */","import React, { Component } from 'react'\r\nimport Video from './Video'\r\nimport './VideoStream.css'\r\nimport { Desktop, Webcam } from '../lib/VideoSources'\r\nimport { Microphone } from '../lib/AudioSources';\r\nimport AudioEmitter from '../lib/AudioEmitter'\r\n\r\nexport default class VideoStream extends Component {\r\n\r\n    componentDidMount() {\r\n        new AudioEmitter(Microphone)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"videostream-container\">\r\n                <Video videoSource = { Desktop } title=\"desktop\" />\r\n                <Video videoSource = { Webcam } title=\"webcam\" />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nimport Messenger from './Messenger'\nimport VideoStream from './VideoStream'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Messenger />\n        <VideoStream />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}